变量:

var 变量名字 类型 = 表达式, "类型"和"= 表达式"可以省略其一.

零值初始化.

应该让一些聚合类型的零值也具有意义.

一组变量的声明或自定义初始化; 或者通过具有多个返回值的函数初始化.

包级变量会在 main() 之前完成初始化.

初始化表达式可以是字面量或任意的表达式.


1. := 用法

广泛用于大部分的局部变量.

注意: i, j = j, i // 交换 i 和 j 的值.

至少要有一个新的变量.

如果变量是外部的, 就不是赋值了, 此处的变量就是新的了.


2. 指针

相等测试.

函数返回局部变量的地址是安全的.

*p++: 将 p 所指加1.

*p 就是变量 v 的别名.

知晓一个变量的全部别名不是很方便.

** 不仅仅是指针会创建别名. **


3. new

func newInt() *int {
    return new(int)
}
func newInt() *int {
    var dummy int
    return &dummy
}

p := new(int)
q := new(int)
fmt.Println(p == q) // "false"

struct{} 和 [0]int, 有可能有相同的地址.

§4.4.1

func delta(old, new int) int { return new - old }


4. 变量的生命周期

局部变量的生命周期从创建开始, 到该变量不再被"引用"为止, 然后其存储空间可能会被回收.

注: 右圆括号另起一行时, 上一行末尾可加逗号, 来避免编译错误.

GC 何以知晓一个变量什么时候可被回收.  -- 后面研究

var global *int
func f() {
    var x int
    x = 1
    global = &x // 堆上分配; 逃逸
}
func g() {
    y := new(int)
    *y = 1 // 可以选择在栈上分配; 未逃逸
}

逃逸的变量会影响程序的性能.