Go code is organized into packages, which are similar to libraries or modules in other languages.
-- A package consists of one or more .go source files in a single directory that define what the package does.
-- Each source file begins with a package declaration, here package main, that states which package the file belongs to,
-- followed by a list of other packages that it imports, and then the declarations of the program that are stored in that file.

Package main is special. It defines a standalone executable program, not a library.
-- Within package main the function main is also special--it’s where execution of the program begins.
-- Whatever main does is what the program does.
-- Of course, main will normally call upon functions in other packages to do much of the work, such as the function fmt.Println.

You must import exactly the packages you need.

The import declarations must follow the package declaration.
-- After that, a program consists of the declarations of functions, variables, constants, and types (introduced by the keywords
-- func, var, const, and type); for the most part, the order of declarations does not matter.
-- This program is about as short as possible since it declares only one function, which in turn calls only one other function.

A function declaration consists of the keyword func, the name of the function, a parameter list (empty for main), a result
-- list (also empty here), and the body of the function—-the statements that define what it does—-enclosed in braces.

Go does not require semicolons at the ends of statements or declarations, except where two or more appear on the same line.
-- In effect, newlines following certain tokens are converted into semicolons,
-- so where newlines are placed matters to proper parsing of Go code.

The gofmt tool rewrites code into the standard format, and the go tool’s fmt subcommand applies
-- gofmt to all the files in the specified package, or the ones in the current directory by default.
Declaring a standard format by fiat eliminates a lot of pointless debate about trivia and, more importantly,
-- enables a variety of automated source code transformations that would be infeasible if arbitrary formatting were allowed.

Section 2.6 and Section 10.7.